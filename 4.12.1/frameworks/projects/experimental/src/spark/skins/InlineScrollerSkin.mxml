<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Licensed to the Apache Software Foundation (ASF) under one or more
//  contributor license agreements.  See the NOTICE file distributed with
//  this work for additional information regarding copyright ownership.
//  The ASF licenses this file to You under the Apache License, Version 2.0
//  (the "License"); you may not use this file except in compliance with
//  the License.  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
////////////////////////////////////////////////////////////////////////////////
-->

<!--- The default skin class for the Spark InlineScroller component. 

@see spark.components.InlineScroller

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark">
	
	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("spark.components.InlineScroller")]
		]]>
	</fx:Metadata> 
	
	<fx:Script>
		<![CDATA[    
			/**
			 *  @private
			 */
			override public function beginHighlightBitmapCapture() : Boolean
			{
				var needUpdate:Boolean = super.beginHighlightBitmapCapture();
				
				// Draw an opaque rect that fill our entire skin. Our background
				// is transparent, but we don't want focus/error skins to
				// poke through.  This is safe to do since we don't have any 
				// graphic elements as direct children.
				graphics.beginFill(0);
				graphics.drawRect(0, 0, width, height);
				graphics.endFill();
				
				return needUpdate;
			}
			
			/**
			 *  @private
			 */
			override public function endHighlightBitmapCapture() : Boolean
			{
				var needUpdate:Boolean = super.endHighlightBitmapCapture();
				
				// Clear the rect we drew in beginBitmapCapture();
				graphics.clear();
				
				return needUpdate;
			}
		]]>
	</fx:Script>
	
	<!---  A vertical scrollbar that lets you control the portion of data that is displayed 
	when there is too much data to fit vertically in a display area.
	The InlineScroller determines whether the vertical ScrollBar is visible. -->
	<s:VScrollBar id="verticalScrollBar" width="100%" visible="false"
				  skinClass="spark.skins.VNoTrackNoThumbScrollBarSkin"/>
	
	<!---  A horizontal scrollbar that lets you control the portion of data that is displayed 
	when there is too much data to fit horizontally in a display area.
	The InlineScroller determines whether the horizontal ScrollBar is visible. -->
	<s:HScrollBar id="horizontalScrollBar" height="100%" visible="false"
				  skinClass="spark.skins.HNoTrackNoThumbScrollBarSkin"/>
	
</s:SparkSkin>